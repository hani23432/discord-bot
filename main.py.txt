import os
import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Button, View, Modal, TextInput
from datetime import datetime
from flask import Flask
from threading import Thread

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

app = Flask('')

order_id = 4497

# قنوات النسخ
OPEN_ORDERS_CHANNEL_ID = 1375937337175048343
COMPLETED_ORDERS_CHANNEL_ID = 1375937648979476550
CLOSED_ORDERS_CHANNEL_ID = 1375937712741289984

@app.route('/')
def home():
    return "Bot is running"

def run():
    # مهم جدًا: خلي البورت 8080، لأنه البورت اللي Replit بيفتحه
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.daemon = True
    t.start()

def smart_time(timestamp):
    now = datetime.utcnow()
    diff = now.date() - timestamp.date()
    if diff.days == 0:
        return "Today " + timestamp.strftime("%I:%M %p").lower()
    elif diff.days == 1:
        return "Yesterday " + timestamp.strftime("%I:%M %p").lower()
    else:
        return timestamp.strftime("%Y-%m-%d %I:%M %p").lower()

class OrderActionsView(View):
    def __init__(self, embed):
        super().__init__(timeout=None)
        self.embed = embed

    @discord.ui.button(label="Complete Order", style=discord.ButtonStyle.green)
    async def complete_order(self, interaction: discord.Interaction, button: discord.ui.Button):
        channel = interaction.guild.get_channel(COMPLETED_ORDERS_CHANNEL_ID)
        self.embed.color = discord.Color.green()
        self.embed.add_field(name="Status", value="✅ Completed", inline=False)
        view = View()
        view.add_item(Button(label="Completed", style=discord.ButtonStyle.green, disabled=True))
        await channel.send(embed=self.embed, view=view)
        await interaction.message.delete()
        await interaction.response.send_message("Order marked as Completed.", ephemeral=True)

    @discord.ui.button(label="Close Order", style=discord.ButtonStyle.danger)
    async def close_order(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("Please enter the reason for closing this order:", ephemeral=True)

        def check(m):
            return m.author == interaction.user and m.channel == interaction.channel

        try:
            reason_msg = await bot.wait_for('message', timeout=120, check=check)
        except:
            await interaction.followup.send("Timeout. Please try closing the order again.", ephemeral=True)
            return

        self.embed.color = discord.Color.red()
        self.embed.add_field(name="Closed Reason", value=reason_msg.content, inline=False)
        self.embed.add_field(name="Status", value="❌ Closed", inline=False)

        channel = interaction.guild.get_channel(CLOSED_ORDERS_CHANNEL_ID)
        view = View()
        view.add_item(Button(label="Order Closed", style=discord.ButtonStyle.danger, disabled=True))
        await channel.send(embed=self.embed, view=view)

        await interaction.message.delete()
        await interaction.followup.send("Order marked as Closed.", ephemeral=True)

class ClaimButton(View):
    def __init__(self, embed, message, author):
        super().__init__(timeout=None)
        self.claimed = False
        self.embed = embed
        self.message = message
        self.author = author

    @discord.ui.button(label="Claim Order", style=discord.ButtonStyle.primary, custom_id="claim_button")
    async def claim(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.claimed:
            await interaction.response.send_message("This order is already claimed!", ephemeral=True)
            return

        self.claimed = True
        button.label = "Order Claimed"
        button.style = discord.ButtonStyle.primary
        button.disabled = True
        self.embed.title = "~~ORDER ACCEPTED~~"

        worker_name = interaction.user.mention
        for i, field in enumerate(self.embed.fields):
            if field.name == "Worker":
                self.embed.set_field_at(i, name="Worker", value=worker_name, inline=True)

        await self.message.edit(embed=self.embed, view=self)
        await interaction.response.send_message("You claimed this order.", ephemeral=True)

        # إرسال نسخة لقناة open orders مع أزرار Complete و Close
        open_channel = interaction.guild.get_channel(OPEN_ORDERS_CHANNEL_ID)
        copy_embed = self.embed.copy()
        copy_embed.color = discord.Color.blue()
        copy_embed.set_footer(text=self.embed.footer.text + f" • Claimed by {worker_name}")
        await open_channel.send(embed=copy_embed, view=OrderActionsView(copy_embed))


class OrderModal(Modal):
    def __init__(self):
        super().__init__(title="Create a new order")

        self.total_price = TextInput(label="Total Price (e.g. 1300M)", style=discord.TextStyle.short)
        self.deposit = TextInput(label="Deposit (e.g. 50M)", style=discord.TextStyle.short)
        self.description = TextInput(label="Description", style=discord.TextStyle.paragraph)
        self.worker_take = TextInput(label="Worker Take (e.g. 910M)", style=discord.TextStyle.short)
        self.customer_name = TextInput(label="Customer Name (e.g. @$)", style=discord.TextStyle.short)

        self.add_item(self.total_price)
        self.add_item(self.deposit)
        self.add_item(self.description)
        self.add_item(self.worker_take)
        self.add_item(self.customer_name)

    async def on_submit(self, interaction: discord.Interaction):
        global order_id
        now = datetime.utcnow()
        time_str = smart_time(now)
        server_icon_url = interaction.guild.icon.url if interaction.guild.icon else None
        server_name = interaction.guild.name if interaction.guild else "Server"

        embed = discord.Embed(color=discord.Color.blue())
        embed.title = "NEW ORDER"
        embed.description = f"<@&1329969310403399731>, Please make sure to keep Customer updated as much as you can."

        embed.add_field(name="Order ID", value=str(order_id), inline=True)
        embed.add_field(name="Total Value", value=self.total_price.value, inline=True)
        embed.add_field(name="Worker Take", value=self.worker_take.value, inline=True)
        embed.add_field(name="Customer", value=self.customer_name.value, inline=True)
        embed.add_field(name="Worker", value="N/A", inline=True)
        embed.add_field(name="Deposit", value=self.deposit.value, inline=True)
        embed.add_field(name="Description", value=self.description.value, inline=False)
        embed.set_footer(text=time_str)

        if server_icon_url:
            embed.set_author(name=server_name, icon_url=server_icon_url)
            embed.set_thumbnail(url=server_icon_url)

        message = await interaction.channel.send(embed=embed)
        view = ClaimButton(embed=embed, message=message, author=interaction.user)
        await message.edit(view=view)

        order_id += 1

        await interaction.response.send_message("Order created successfully!", ephemeral=True)

@tree.command(name="postorder", description="Create a new order")
async def postorder(interaction: discord.Interaction):
    modal = OrderModal()
    await interaction.response.send_modal(modal)

@bot.event
async def on_ready():
    await tree.sync()
    print(f"Logged in as {bot.user}")

keep_alive()  # شغّل سيرفر الويب قبل بوت ديسكورد
bot.run(os.getenv("TOKEN"))
